version: '3.8'

services:
  # Main AI Agent Application
  ai-agent:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - GOOGLE_CLOUD_PROJECT=your-project-id
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account.json
      - LOCATION=us-central1
      - VERTEX_AI_MODEL=gemini-1.5-pro
      - VERTEX_AI_TEMPERATURE=0.7
      - VERTEX_AI_MAX_TOKENS=8192
      - FIRESTORE_DATABASE=(default)
      - FIRESTORE_COLLECTION_PRODUCTS=products
      - FIRESTORE_COLLECTION_USERS=users
      - FIRESTORE_COLLECTION_ORDERS=orders
      - GCS_BUCKET_NAME=your-bucket-name
      - GCS_PRODUCT_IMAGES_PATH=product-images/
      - VISION_API_ENABLED=true
      - VISION_CONFIDENCE_THRESHOLD=0.7
      - TRANSLATION_API_ENABLED=true
      - DEFAULT_LANGUAGE=tr
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_VERSION=v1
      - API_KEY=your-secure-api-key-here
      - CORS_ORIGINS=["http://localhost:3000"]
      - AGENT_MAX_ITERATIONS=10
      - AGENT_TIMEOUT_SECONDS=30
      - ENABLE_MEMORY=true
      - MEMORY_TYPE=firestore
      - ENABLE_MONITORING=true
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - PROMETHEUS_PORT=8001
      - DEBUG=false
      - LOG_LEVEL=INFO
    volumes:
      - ./credentials:/app/credentials:ro
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - redis
      - prometheus
      - jaeger
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-agent
    restart: unless-stopped

  # Log aggregation with Fluentd (optional)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    ports:
      - "24224:24224"
    volumes:
      - ./config/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/fluentd/log
    restart: unless-stopped

  # Elasticsearch for log storage (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped

  # Kibana for log visualization (optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  default:
    name: ecommerce-ai-network